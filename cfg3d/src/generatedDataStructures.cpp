#include "structures.h"

class sofaArm : public PlanarPrimitive{};
class monitor : public PlanarPrimitive{};
class Chair : public NonTerminal{};
class tableTop : public PlanarPrimitive{};
class sofaBackRest : public PlanarPrimitive{};
class window : public PlanarPrimitive{};
class CPUSide : public PlanarPrimitive{};
class cupboardFront : public PlanarPrimitive{};
class CPU : public NonTerminal{};
class chairLArmRest : public PlanarPrimitive{};
class cupboardSide : public PlanarPrimitive{};
class CPUTop : public PlanarPrimitive{};
class pillar : public NonTerminal{};
class printerFront : public PlanarPrimitive{};
class printerTray : public PlanarPrimitive{};
class paper : public PlanarPrimitive{};
class dustbinNarrow : public PlanarPrimitive{};
class Wall : public PlanarPrimitive{};
class chairArmRest : public PlanarPrimitive{};
class printerSide : public PlanarPrimitive{};
class dustbinWide : public PlanarPrimitive{};
class keyboard : public PlanarPrimitive{};
class FridgeSide : public PlanarPrimitive{};
class tableDrawer : public PlanarPrimitive{};
class tableBack : public PlanarPrimitive{};
class dustbin : public NonTerminal{};
class Floor : public PlanarPrimitive{};
class WhiteBoardRack : public PlanarPrimitive{};
class pillarRight : public PlanarPrimitive{};
class ACVent : public PlanarPrimitive{};
class printer : public NonTerminal{};
class chairRArmRest : public PlanarPrimitive{};
class printerTop : public PlanarPrimitive{};
class sofaBase : public PlanarPrimitive{};
class FridgeTop : public PlanarPrimitive{};
class Table : public NonTerminal{};
class mug : public PlanarPrimitive{};
class chairBase : public PlanarPrimitive{};
class tableLeg : public PlanarPrimitive{};
class CPUFront : public PlanarPrimitive{};
class pillarMid : public PlanarPrimitive{};
class keyboardTray : public PlanarPrimitive{};
class pillarLeft : public PlanarPrimitive{};
class chairBack : public PlanarPrimitive{};
class chairBackRest : public PlanarPrimitive{};
class sofaSide : public PlanarPrimitive{};
class sofaFrontBelowSeat : public PlanarPrimitive{};
class door : public PlanarPrimitive{};
class FridgeDoor : public PlanarPrimitive{};
class CPUSide_CPUFront : public NonTerminalIntermediate{};
class CPUSide_CPUFront_CPUTop : public NonTerminalIntermediate{};
class CPUSide_CPUFront_chairBack : public NonTerminalIntermediate{};
class CPUTop_CPUFront : public NonTerminalIntermediate{};
class chairArmRest_chairBack : public NonTerminalIntermediate{};
class chairArmRest_chairBackRest : public NonTerminalIntermediate{};
class chairArmRest_chairBackRest_chairBack : public NonTerminalIntermediate{};
class chairArmRest_chairBack_chairBase : public NonTerminalIntermediate{};
class chairBack_chairBackRest : public NonTerminalIntermediate{};
class chairBase_chairBackRest : public NonTerminalIntermediate{};
class chairBase_chairBackRest_chairArmRest : public NonTerminalIntermediate{};
class chairBase_chairBackRest_chairBack : public NonTerminalIntermediate{};
class chairRArmRest_chairLArmRest : public NonTerminalIntermediate{};
class chairRArmRest_chairLArmRest_chairBack : public NonTerminalIntermediate{};
class FridgeTop_FridgeSide : public NonTerminalIntermediate{};
class FridgeTop_FridgeSide_FridgeDoor : public NonTerminalIntermediate{};
class Fridge : public NonTerminal{};
class sofaBackRest_sofaBase : public NonTerminalIntermediate{};
class Sofa : public NonTerminal{};
class keyboardTray_tableBack : public NonTerminalIntermediate{};
class keyboardTray_tableBack_tableDrawer : public NonTerminalIntermediate{};
class keyboardTray_tableTop : public NonTerminalIntermediate{};
class tableDrawer_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableTop : public NonTerminalIntermediate{};
class tableLeg_tableTop_keyboardTray : public NonTerminalIntermediate{};
class tableLeg_tableTop_keyboardTray_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableTop_tableBack : public NonTerminalIntermediate{};
class tableTop_tableDrawer : public NonTerminalIntermediate{};
class tableTop_tableDrawer_keyboardTray : public NonTerminalIntermediate{};
class tableTop_tableDrawer_keyboardTray_tableBack : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableBack : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableLeg : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableLeg_keyboardTray : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableLeg_keyboardTray_tableBack : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableLeg_tableBack : public NonTerminalIntermediate{};
class tableTop_tableDrawer_tableLeg_tableLeg : public NonTerminalIntermediate{};
class cupboardSide_cupboardFront : public NonTerminalIntermediate{};
class cupboard : public NonTerminal{};
class dustbinNarrow_dustbinWide : public NonTerminalIntermediate{};
class pillarRight_pillarLeft : public NonTerminalIntermediate{};
class pillarRight_pillarLeft_pillarMid : public NonTerminalIntermediate{};
class printerFront_printerTop : public NonTerminalIntermediate{};
class printerFront_printerTop_printerSide : public NonTerminalIntermediate{};
class printerFront_printerTop_printerSide_printerTray : public NonTerminalIntermediate{};
class printerSide_printerFront : public NonTerminalIntermediate{};
class chairBackRest_sofaBase : public NonTerminalIntermediate{};
class sofa : public NonTerminal{};
class sofaBackRest_sofaBase_sofaArm : public NonTerminalIntermediate{};
class sofaBackRest_sofaBase_sofaFrontBelowSeat : public NonTerminalIntermediate{};
class sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide : public NonTerminalIntermediate{};

template<typename SupportType, typename RHS_Type2 > 
bool DoubleRuleComplex<SupportType,RHS_Type2> :: canBaseBeHallucinated()
{
    return typeid(Floor)==typeid(SupportType); // should be replaced by static comparison
}

void appendLearningRules(vector<RulePtr>& learningRules) {
vector<string> temp;
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaArm,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<monitor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaBackRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<Table>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<window,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<cupboardFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairLArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<cupboardSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillar,pillarMid>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerTray,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<paper,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbinNarrow,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Wall,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbinWide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<keyboard,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableDrawer,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableBack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbin,dustbinWide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Floor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<WhiteBoardRack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarRight,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<ACVent,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairRArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaBase,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<mug,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBase,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableLeg,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarMid,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<keyboardTray,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarLeft,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBackRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaFrontBelowSeat,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<door,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeDoor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUSide_CPUFront,CPUSide,CPUFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUSide_CPUFront>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUSide_CPUFront_CPUTop,CPUSide_CPUFront,CPUTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUSide_CPUFront_CPUTop>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUSide_CPUFront_chairBack,CPUSide_CPUFront,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUSide_CPUFront_chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUTop_CPUFront,CPUTop,CPUFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUTop_CPUFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<CPU>()));
	temp.clear();
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<CPU,paper>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBack,chairArmRest,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBackRest,chairArmRest,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBackRest_chairBack,chairArmRest_chairBackRest,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBackRest_chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBack_chairBase,chairArmRest_chairBack,chairBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBack_chairBase>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBack_chairBackRest,chairBack,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBack_chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBase_chairBackRest,chairBase,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBase_chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBase_chairBackRest_chairArmRest,chairBase_chairBackRest,chairArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBase_chairBackRest_chairArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBase_chairBackRest_chairBack,chairBase_chairBackRest,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBase_chairBackRest_chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairRArmRest_chairLArmRest,chairRArmRest,chairLArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairRArmRest_chairLArmRest_chairBack,chairRArmRest_chairLArmRest,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairRArmRest_chairLArmRest_chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<Floor>()));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Wall>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Chair>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,tableTop>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Sofa>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,SupportComplex<Table> >(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,ACVent>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,CPU>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,pillar>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,window>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,sofa>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Table>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,door>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,printer>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(door).name());
	temp.push_back(typeid(SupportComplex<Floor>).name());
	temp.push_back(typeid(dustbin).name());
	temp.push_back(typeid(Sofa).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(cupboard).name());
	temp.push_back(typeid(CPU).name());
	temp.push_back(typeid(ACVent).name());
	temp.push_back(typeid(Wall).name());
	temp.push_back(typeid(sofa).name());
	temp.push_back(typeid(pillar).name());
	temp.push_back(typeid(window).name());
	temp.push_back(typeid(tableTop).name());
	temp.push_back(typeid(Table).name());
	temp.push_back(typeid(Chair).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,dustbin>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,cupboard>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<FridgeTop_FridgeSide,FridgeTop,FridgeSide>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<FridgeTop_FridgeSide_FridgeDoor,FridgeTop_FridgeSide,FridgeDoor>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Fridge,FridgeTop_FridgeSide_FridgeDoor>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase,sofaBackRest,sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Sofa,sofaBackRest_sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableBack,keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableBack_tableDrawer,keyboardTray_tableBack,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,keyboardTray_tableBack_tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableTop,keyboardTray,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,keyboardTray_tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableLeg,tableDrawer,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableLeg>()));
	//appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableLeg,tableLeg,tableLeg>()));
	//appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop,tableLeg,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_keyboardTray,tableLeg_tableTop,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_keyboardTray_tableLeg,tableLeg_tableTop_keyboardTray,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_keyboardTray_tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_tableBack,tableLeg_tableTop,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer,tableTop,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_keyboardTray,tableTop_tableDrawer,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_keyboardTray_tableBack,tableTop_tableDrawer_keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_keyboardTray_tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableBack,tableTop_tableDrawer,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableLeg,tableTop_tableDrawer,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableLeg_keyboardTray,tableTop_tableDrawer_tableLeg,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableLeg_keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableLeg_keyboardTray_tableBack,tableTop_tableDrawer_tableLeg_keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableLeg_keyboardTray_tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableLeg_tableBack,tableTop_tableDrawer_tableLeg,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableLeg_tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableTop_tableDrawer_tableLeg_tableLeg,tableTop_tableDrawer_tableLeg,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop_tableDrawer_tableLeg_tableLeg>()));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,CPU>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,printer>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,keyboard>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,keyboardTray>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,monitor>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,SupportComplex<CPU> >(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,paper>(temp)));
	temp.clear();
	temp.push_back(typeid(printer).name());
	temp.push_back(typeid(monitor).name());
	temp.push_back(typeid(mug).name());
	temp.push_back(typeid(paper).name());
	temp.push_back(typeid(keyboard).name());
	temp.push_back(typeid(SupportComplex<Table>).name());
	temp.push_back(typeid(keyboardTray).name());
	temp.push_back(typeid(SupportComplex<CPU>).name());
	temp.push_back(typeid(CPU).name());
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,mug>(temp)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<cupboardSide_cupboardFront,cupboardSide,cupboardFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<cupboard,cupboardSide_cupboardFront>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<dustbinNarrow_dustbinWide,dustbinNarrow,dustbinWide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbin,dustbinNarrow_dustbinWide>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<pillarRight_pillarLeft,pillarRight,pillarLeft>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillar,pillarRight_pillarLeft>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<pillarRight_pillarLeft_pillarMid,pillarRight_pillarLeft,pillarMid>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillar,pillarRight_pillarLeft_pillarMid>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop,printerFront,printerTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop_printerSide,printerFront_printerTop,printerSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop_printerSide>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop_printerSide_printerTray,printerFront_printerTop_printerSide,printerTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop_printerSide_printerTray>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerSide_printerFront,printerSide,printerFront>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerSide_printerFront>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_sofaBase,chairBackRest,sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofa,chairBackRest_sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofa,sofaBackRest_sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaArm,sofaBackRest_sofaBase,sofaArm>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofa,sofaBackRest_sofaBase_sofaArm>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaFrontBelowSeat,sofaBackRest_sofaBase,sofaFrontBelowSeat>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofa,sofaBackRest_sofaBase_sofaFrontBelowSeat>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide,sofaBackRest_sofaBase_sofaFrontBelowSeat,sofaSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofa,sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide>()));
}
