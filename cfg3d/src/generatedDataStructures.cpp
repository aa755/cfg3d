#include "structures.cpp"

class sofaArm : public PlanarPrimitive{};
class monitor : public PlanarPrimitive{};
class Chair : public NonTerminal{};
class tableTop : public PlanarPrimitive{};
class dustbinNarrow : public PlanarPrimitive{};
class sofaBackRest : public PlanarPrimitive{};
class window : public PlanarPrimitive{};
class CPUSide : public PlanarPrimitive{};
class chairLArmRest : public PlanarPrimitive{};
class CPUTop : public PlanarPrimitive{};
class printerFront : public PlanarPrimitive{};
class printerTray : public PlanarPrimitive{};
class paper : public PlanarPrimitive{};
class CPU : public NonTerminal{};
class ACVent : public PlanarPrimitive{};
class Wall : public PlanarPrimitive{};
class chairArmRest : public PlanarPrimitive{};
class printerSide : public PlanarPrimitive{};
class dustbinWide : public PlanarPrimitive{};
class door : public PlanarPrimitive{};
class keyboard : public PlanarPrimitive{};
class FridgeSide : public PlanarPrimitive{};
class tableDrawer : public PlanarPrimitive{};
class cupboardSide : public PlanarPrimitive{};
class tableBack : public PlanarPrimitive{};
class dustbin : public NonTerminal{};
class Floor : public PlanarPrimitive{};
class WhiteBoardRack : public PlanarPrimitive{};
class pillarRight : public PlanarPrimitive{};
class pillar : public NonTerminal{};
class printer : public NonTerminal{};
class cupboardFront : public PlanarPrimitive{};
class chairRArmRest : public PlanarPrimitive{};
class printerTop : public PlanarPrimitive{};
class sofaBase : public PlanarPrimitive{};
class FridgeTop : public PlanarPrimitive{};
class Table : public NonTerminal{};
class mug : public PlanarPrimitive{};
class chairBase : public PlanarPrimitive{};
class tableLeg : public PlanarPrimitive{};
class CPUFront : public PlanarPrimitive{};
class pillarMid : public PlanarPrimitive{};
class keyboardTray : public PlanarPrimitive{};
class pillarLeft : public PlanarPrimitive{};
class chairBack : public PlanarPrimitive{};
class chairBackRest : public PlanarPrimitive{};
class sofaSide : public PlanarPrimitive{};
class sofaFrontBelowSeat : public PlanarPrimitive{};
class FridgeDoor : public PlanarPrimitive{};
class CPUFront_CPUSide : public NonTerminalIntermediate{};
class CPUFront_CPUSide_CPUTop : public NonTerminalIntermediate{};
class CPUFront_CPUSide_chairBack : public NonTerminalIntermediate{};
class CPUFront_CPUTop : public NonTerminalIntermediate{};
class chairArmRest_chairBack : public NonTerminalIntermediate{};
class chairArmRest_chairBackRest : public NonTerminalIntermediate{};
class chairArmRest_chairBack_chairBackRest : public NonTerminalIntermediate{};
class chairArmRest_chairBack_chairBase : public NonTerminalIntermediate{};
class chairBackRest_chairBase : public NonTerminalIntermediate{};
class chairBackRest_chairBase_chairArmRest : public NonTerminalIntermediate{};
class chairBackRest_chairBase_chairArmRest_chairArmRest : public NonTerminalIntermediate{};
class chairBackRest_chairBase_chairBack : public NonTerminalIntermediate{};
class chairBack_chairBackRest : public NonTerminalIntermediate{};
class chairBack_chairLArmRest : public NonTerminalIntermediate{};
class chairBack_chairLArmRest_chairRArmRest : public NonTerminalIntermediate{};
class FridgeDoor_FridgeSide : public NonTerminalIntermediate{};
class FridgeDoor_FridgeSide_FridgeTop : public NonTerminalIntermediate{};
class Fridge : public NonTerminal{};
class sofaBackRest_sofaBase : public NonTerminalIntermediate{};
class Sofa : public NonTerminal{};
class keyboardTray_tableBack : public NonTerminalIntermediate{};
class keyboardTray_tableBack_tableDrawer : public NonTerminalIntermediate{};
class keyboardTray_tableTop : public NonTerminalIntermediate{};
class tableDrawer_tableLeg : public NonTerminalIntermediate{};
class tableDrawer_tableTop : public NonTerminalIntermediate{};
class tableDrawer_tableTop_keyboardTray : public NonTerminalIntermediate{};
class tableDrawer_tableTop_keyboardTray_tableBack : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableBack : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_keyboardTray : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_keyboardTray_tableBack : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_keyboardTray_tableBack_tableLeg : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_keyboardTray_tableLeg : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_tableBack : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_tableBack_tableDrawer : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_tableDrawer : public NonTerminalIntermediate{};
class tableDrawer_tableTop_tableLeg_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableTop : public NonTerminalIntermediate{};
class tableLeg_tableTop_keyboardTray : public NonTerminalIntermediate{};
class tableLeg_tableTop_keyboardTray_tableLeg : public NonTerminalIntermediate{};
class tableLeg_tableTop_tableBack : public NonTerminalIntermediate{};
class cupboardFront_cupboardSide : public NonTerminalIntermediate{};
class cupboard : public NonTerminal{};
class dustbinNarrow_dustbinWide : public NonTerminalIntermediate{};
class pillarLeft_pillarRight : public NonTerminalIntermediate{};
class pillarLeft_pillarRight_pillarMid : public NonTerminalIntermediate{};
class printerFront_printerSide : public NonTerminalIntermediate{};
class printerFront_printerTop : public NonTerminalIntermediate{};
class printerFront_printerTop_printerSide : public NonTerminalIntermediate{};
class printerFront_printerTop_printerSide_printerTray : public NonTerminalIntermediate{};
class chairBackRest_sofaBase : public NonTerminalIntermediate{};
class sofa : public NonTerminal{};
class sofaBackRest_sofaBase_sofaArm : public NonTerminalIntermediate{};
class sofaBackRest_sofaBase_sofaFrontBelowSeat : public NonTerminalIntermediate{};
class sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide : public NonTerminalIntermediate{};

template<typename SupportType, typename RHS_Type2 >
bool DoubleRuleComplex<SupportType,RHS_Type2> :: canBaseBeHallucinated()
{
return typeid(Floor)==typeid(SupportType); // should be replaced by static comparison
}

void appendLearningRules(vector<RulePtr>& learningRules) {
	vector<string> temp;
	vector<double> tempratio;
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaArm,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<monitor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest>(0.0444444444444)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbinNarrow,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaBackRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<Table>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<window,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairLArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerTray,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<paper,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUTop>(0.0333333333333)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<ACVent,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront>(0.0666666666667)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Wall,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<dustbinWide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<door,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<keyboard,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableDrawer,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<cupboardSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableBack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<dustbin,dustbinWide>(0.5)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<Floor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<WhiteBoardRack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarRight,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<pillar,pillarMid>(0.1)));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront>(0.0666666666667)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<cupboardFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairRArmRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<printerTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaBase,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeTop,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<mug,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBase,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<tableLeg,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBack>(0.0888888888889)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<CPUFront,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBase>(0.0666666666667)));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarMid,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<keyboardTray,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<pillarLeft,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBack,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<chairBackRest,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaSide,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<sofaFrontBelowSeat,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRule<FridgeDoor,Plane>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableTop>(0.441860465116)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUFront_CPUSide,CPUFront,CPUSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront_CPUSide>(0.333333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUFront_CPUSide_CPUTop,CPUFront_CPUSide,CPUTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront_CPUSide_CPUTop>(0.3)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUFront_CPUSide_chairBack,CPUFront_CPUSide,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront_CPUSide_chairBack>(0.0333333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<CPUFront_CPUTop,CPUFront,CPUTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<CPU,CPUFront_CPUTop>(0.233333333333)));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<CPU>()));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.5);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.5);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<CPU,paper>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBack,chairArmRest,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBack>(0.0222222222222)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBackRest,chairArmRest,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBackRest>(0.0222222222222)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBack_chairBackRest,chairArmRest_chairBack,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBack_chairBackRest>(0.0222222222222)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairArmRest_chairBack_chairBase,chairArmRest_chairBack,chairBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairArmRest_chairBack_chairBase>(0.0666666666667)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_chairBase,chairBackRest,chairBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest_chairBase>(0.355555555556)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_chairBase_chairArmRest,chairBackRest_chairBase,chairArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest_chairBase_chairArmRest>(0.0666666666667)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_chairBase_chairArmRest_chairArmRest,chairBackRest_chairBase_chairArmRest,chairArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest_chairBase_chairArmRest_chairArmRest>(0.0444444444444)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_chairBase_chairBack,chairBackRest_chairBase,chairBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBackRest_chairBase_chairBack>(0.155555555556)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBack_chairBackRest,chairBack,chairBackRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBack_chairBackRest>(0.0222222222222)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBack_chairLArmRest,chairBack,chairLArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBack_chairLArmRest_chairRArmRest,chairBack_chairLArmRest,chairRArmRest>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Chair,chairBack_chairLArmRest_chairRArmRest>(0.0222222222222)));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleComplex<Floor>()));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Wall>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,ACVent>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,pillar>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,sofa>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Chair>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,window>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Sofa>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,Table>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,SupportComplex<Table> >(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,CPU>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,door>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,printer>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(door).name());
	tempratio.push_back(0.012084592145);
	temp.push_back(typeid(SupportComplex<Floor>).name());
	tempratio.push_back(0.220543806647);
	temp.push_back(typeid(dustbin).name());
	tempratio.push_back(0.00604229607251);
	temp.push_back(typeid(Sofa).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.175226586103);
	temp.push_back(typeid(cupboard).name());
	tempratio.push_back(0.00302114803625);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.00906344410876);
	temp.push_back(typeid(ACVent).name());
	tempratio.push_back(0.0181268882175);
	temp.push_back(typeid(Wall).name());
	tempratio.push_back(0.283987915408);
	temp.push_back(typeid(sofa).name());
	tempratio.push_back(0.02416918429);
	temp.push_back(typeid(pillar).name());
	tempratio.push_back(0.0271903323263);
	temp.push_back(typeid(window).name());
	tempratio.push_back(0.036253776435);
	temp.push_back(typeid(Table).name());
	tempratio.push_back(0.0422960725076);
	temp.push_back(typeid(Chair).name());
	tempratio.push_back(0.126888217523);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,cupboard>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Floor,dustbin>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<FridgeDoor_FridgeSide,FridgeDoor,FridgeSide>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<FridgeDoor_FridgeSide_FridgeTop,FridgeDoor_FridgeSide,FridgeTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Fridge,FridgeDoor_FridgeSide_FridgeTop>(1.0)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase,sofaBackRest,sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Sofa,sofaBackRest_sofaBase>(1.0)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableBack,keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableBack_tableDrawer,keyboardTray_tableBack,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,keyboardTray_tableBack_tableDrawer>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<keyboardTray_tableTop,keyboardTray,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,keyboardTray_tableTop>(0.0232558139535)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableLeg,tableDrawer,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableLeg>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop,tableDrawer,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop>(0.0813953488372)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_keyboardTray,tableDrawer_tableTop,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_keyboardTray>(0.0697674418605)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_keyboardTray_tableBack,tableDrawer_tableTop_keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_keyboardTray_tableBack>(0.0232558139535)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableBack,tableDrawer_tableTop,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableBack>(0.0232558139535)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg,tableDrawer_tableTop,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg>(0.0348837209302)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_keyboardTray,tableDrawer_tableTop_tableLeg,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_keyboardTray>(0.0348837209302)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_keyboardTray_tableBack,tableDrawer_tableTop_tableLeg_keyboardTray,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_keyboardTray_tableBack>(0.0348837209302)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_keyboardTray_tableBack_tableLeg,tableDrawer_tableTop_tableLeg_keyboardTray_tableBack,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_keyboardTray_tableBack_tableLeg>(0.0232558139535)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_keyboardTray_tableLeg,tableDrawer_tableTop_tableLeg_keyboardTray,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_keyboardTray_tableLeg>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_tableBack,tableDrawer_tableTop_tableLeg,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_tableBack>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_tableBack_tableDrawer,tableDrawer_tableTop_tableLeg_tableBack,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_tableBack_tableDrawer>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_tableDrawer,tableDrawer_tableTop_tableLeg,tableDrawer>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_tableDrawer>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableDrawer_tableTop_tableLeg_tableLeg,tableDrawer_tableTop_tableLeg,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableDrawer_tableTop_tableLeg_tableLeg>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableLeg,tableLeg,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableLeg>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop,tableLeg,tableTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop>(0.0581395348837)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_keyboardTray,tableLeg_tableTop,keyboardTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_keyboardTray>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_keyboardTray_tableLeg,tableLeg_tableTop_keyboardTray,tableLeg>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_keyboardTray_tableLeg>(0.0116279069767)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<tableLeg_tableTop_tableBack,tableLeg_tableTop,tableBack>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<Table,tableLeg_tableTop_tableBack>(0.0232558139535)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,CPU>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,keyboard>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,keyboardTray>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,monitor>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,SupportComplex<CPU> >(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,paper>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,mug>(temp,true,tempratio)));
	temp.clear();
	tempratio.clear();
	temp.push_back(typeid(printer).name());
	tempratio.push_back(0.046218487395);
	temp.push_back(typeid(monitor).name());
	tempratio.push_back(0.252100840336);
	temp.push_back(typeid(mug).name());
	tempratio.push_back(0.00420168067227);
	temp.push_back(typeid(paper).name());
	tempratio.push_back(0.163865546218);
	temp.push_back(typeid(keyboard).name());
	tempratio.push_back(0.113445378151);
	temp.push_back(typeid(SupportComplex<Table>).name());
	tempratio.push_back(0.294117647059);
	temp.push_back(typeid(keyboardTray).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(SupportComplex<CPU>).name());
	tempratio.push_back(0.0168067226891);
	temp.push_back(typeid(CPU).name());
	tempratio.push_back(0.0924369747899);
	appendRuleInstance(learningRules,RulePtr(new DoubleRuleComplex<Table,printer>(temp,true,tempratio)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<cupboardFront_cupboardSide,cupboardFront,cupboardSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<cupboard,cupboardFront_cupboardSide>(1.0)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<dustbinNarrow_dustbinWide,dustbinNarrow,dustbinWide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<dustbin,dustbinNarrow_dustbinWide>(0.5)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<pillarLeft_pillarRight,pillarLeft,pillarRight>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<pillar,pillarLeft_pillarRight>(0.8)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<pillarLeft_pillarRight_pillarMid,pillarLeft_pillarRight,pillarMid>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<pillar,pillarLeft_pillarRight_pillarMid>(0.1)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerSide,printerFront,printerSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerSide>(0.133333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop,printerFront,printerTop>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop>(0.333333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop_printerSide,printerFront_printerTop,printerSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop_printerSide>(0.333333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<printerFront_printerTop_printerSide_printerTray,printerFront_printerTop_printerSide,printerTray>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<printer,printerFront_printerTop_printerSide_printerTray>(0.133333333333)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<chairBackRest_sofaBase,chairBackRest,sofaBase>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<sofa,chairBackRest_sofaBase>(0.111111111111)));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<sofa,sofaBackRest_sofaBase>(0.444444444444)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaArm,sofaBackRest_sofaBase,sofaArm>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<sofa,sofaBackRest_sofaBase_sofaArm>(0.222222222222)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaFrontBelowSeat,sofaBackRest_sofaBase,sofaFrontBelowSeat>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<sofa,sofaBackRest_sofaBase_sofaFrontBelowSeat>(0.111111111111)));
	appendRuleInstance(learningRules,RulePtr(new DoubleRule<sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide,sofaBackRest_sofaBase_sofaFrontBelowSeat,sofaSide>()));
	appendRuleInstance(learningRules,RulePtr(new SingleRuleNoFeature<sofa,sofaBackRest_sofaBase_sofaFrontBelowSeat_sofaSide>(0.111111111111)));
}
